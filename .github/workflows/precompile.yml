name: precompile

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  linux-gnu:
    runs-on: ubuntu-latest
    env:
      OPENSSL_VERSION: "3.2.0"
    strategy:
      matrix:
        arch: [x86_64, i686, aarch64, riscv64, ppc64le, s390x]
      fail-fast: false

    name: ${{ matrix.arch }}-linux-gnu

    steps:
      - uses: actions/checkout@v4

      - name: Cache Precompiled OpenSSL
        id: cache-openssl
        uses: actions/cache@v3
        with:
          key: openssl-${{ env.OPENSSL_VERSION }}-${{ matrix.arch }}-linux-gnu
          path: |
            ./openssl-${{ env.OPENSSL_VERSION }}-${{ matrix.arch }}-linux-gnu.tar.gz

      - name: Download Precompiled OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          curl -fSL "https://github.com/cocoa-xu/openssl-build/releases/download/v${OPENSSL_VERSION}/openssl-${{ matrix.arch }}-linux-gnu.tar.gz" -o "openssl-${{ env.OPENSSL_VERSION }}-${{ matrix.arch }}-linux-gnu.tar.gz"

      - name: Cache OTP Source Code
        id: cache-otp
        uses: actions/cache@v3
        with:
          key: otp-${{ github.ref_name }}
          path: |
            ./otp_src_${{ github.ref_name }}.tar.gz

      - name: Download OTP Source Code
        if: steps.cache-otp.outputs.cache-hit != 'true'
        run: |
          export OTP_VERSION=${GITHUB_REF##*/v}
          echo "OTP_VERSION: $OTP_VERSION"
          echo "github.ref_name: ${{ github.ref_name }}"
          curl -fSL "https://github.com/erlang/otp/releases/download/OTP-${OTP_VERSION}/otp_src_${OTP_VERSION}.tar.gz" -o "otp_src_${{ github.ref_name }}.tar.gz"

      - name: Pull docker image
        run: |
          if [ "${{ matrix.arch }}" = "riscv64" ]; then
            sudo docker pull --platform=linux/${{ matrix.arch }} riscv64/ubuntu:22.04
          else
            sudo docker pull quay.io/pypa/manylinux2014_${{ matrix.arch }}:latest
          fi

      - name: Install binfmt
        run: |
          sudo apt install -y binfmt-support qemu-user-static

      - name: Compile OTP
        run: |
          cp .github/script-to-build-gnu.sh ./
          cp .github/do-build.sh ./

          bash ./script-to-build-gnu.sh "${{ github.ref_name }}" "${{ matrix.arch }}"

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            otp-*.tar.gz

  linux-musl:
    runs-on: ubuntu-latest
    env:
      OPENSSL_VERSION: "3.2.0"
    strategy:
      matrix:
        arch: [x86_64, i386, aarch64, riscv64, ppc64le, s390x]
      fail-fast: false

    name: ${{ matrix.arch }}-linux-musl

    steps:
      - uses: actions/checkout@v4

      - name: Cache Precompiled OpenSSL
        id: cache-openssl
        uses: actions/cache@v3
        with:
          key: openssl-${{ env.OPENSSL_VERSION }}-${{ matrix.arch }}-linux-musl
          path: |
            ./openssl-${{ env.OPENSSL_VERSION }}-${{ matrix.arch }}-linux-musl.tar.gz

      - name: Download Precompiled OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          curl -fSL "https://github.com/cocoa-xu/openssl-build/releases/download/v${OPENSSL_VERSION}/openssl-${{ matrix.arch }}-linux-musl.tar.gz" -o "openssl-${{ env.OPENSSL_VERSION }}-${{ matrix.arch }}-linux-musl.tar.gz"

      - name: Cache OTP Source Code
        id: cache-otp
        uses: actions/cache@v3
        with:
          key: otp-${{ github.ref_name }}
          path: |
            ./otp_src_${{ github.ref_name }}.tar.gz

      - name: Download OTP Source Code
        if: steps.cache-otp.outputs.cache-hit != 'true'
        run: |
          export OTP_VERSION=${GITHUB_REF##*/v}
          echo "OTP_VERSION: $OTP_VERSION"
          echo "github.ref_name: ${{ github.ref_name }}"
          curl -fSL "https://github.com/erlang/otp/releases/download/OTP-${OTP_VERSION}/otp_src_${OTP_VERSION}.tar.gz" -o "otp_src_${{ github.ref_name }}.tar.gz"

      - name: Pull docker image
        run: |
          if [ "${{ matrix.arch }}" = "riscv64" ]; then
            sudo docker pull --platform=linux/${{ matrix.arch }} alpine:edge
          else
            sudo docker pull --platform=linux/${{ matrix.arch }} alpine:latest
          fi

      - name: Install binfmt
        run: |
          sudo apt install -y binfmt-support qemu-user-static

      - name: Precompile
        run: |
          cp .github/script-to-build-musl.sh ./
          cp .github/do-build.sh ./

          if [ "${{ matrix.arch }}" = "riscv64" ]; then
            bash ./script-to-build-musl.sh "${GITHUB_REF##*/v}" "${{ matrix.arch }}" "alpine:edge"
          else
            bash ./script-to-build-musl.sh "${GITHUB_REF##*/v}" "${{ matrix.arch }}" "alpine:latest"
          fi

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            build/*.tar.gz

  deploy-linux:
    runs-on: ubuntu-latest
    needs: [linux-gnu, linux-musl]
    steps:
      - name: deploy
        if: startsWith(github.ref, 'refs/tags/') && github.repository == 'cocoa-xu/otp-build'
        env:
          DEPLOY_LINUX_GNU_HOOK_URL: ${{ secrets.DEPLOY_LINUX_GNU_HOOK_URL }}
          DEPLOY_LINUX_MUSL_HOOK_URL: ${{ secrets.DEPLOY_LINUX_MUSL_HOOK_URL }}
        run: |
          curl -sS --no-progress-meter "${DEPLOY_LINUX_GNU_HOOK_URL}${{ github.ref_name }}"
          curl -sS --no-progress-meter "${DEPLOY_LINUX_MUSL_HOOK_URL}${{ github.ref_name }}"

  macos:
    runs-on: macos-12
    env:
      OPENSSL_VERSION: "3.2.0"
    strategy:
      matrix:
        arch: [x86_64, arm64]
      fail-fast: false

    name: ${{ matrix.arch }}-apple-darwin

    steps:
      - uses: actions/checkout@v4

      - name: Cache Precompiled OpenSSL
        id: cache-openssl
        uses: actions/cache@v3
        with:
          key: openssl-${{ env.OPENSSL_VERSION }}-${{ matrix.arch }}-apple-darwin
          path: |
            ./openssl-${{ env.OPENSSL_VERSION }}-${{ matrix.arch }}-apple-darwin.tar.gz

      - name: Download Precompiled OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          curl -fSL "https://github.com/cocoa-xu/openssl-build/releases/download/v${OPENSSL_VERSION}/openssl-${{ matrix.arch }}-apple-darwin.tar.gz" -o "openssl-${{ env.OPENSSL_VERSION }}-${{ matrix.arch }}-apple-darwin.tar.gz"

      - name: Cache OTP Source Code
        id: cache-otp
        uses: actions/cache@v3
        with:
          key: otp-${{ github.ref_name }}
          path: |
            ./otp_src_${{ github.ref_name }}.tar.gz

      - name: Download OTP Source Code
        if: steps.cache-otp.outputs.cache-hit != 'true'
        run: |
          export OTP_VERSION=${GITHUB_REF##*/v}
          echo "OTP_VERSION: $OTP_VERSION"
          echo "github.ref_name: ${{ github.ref_name }}"
          curl -fSL "https://github.com/erlang/otp/releases/download/OTP-${OTP_VERSION}/otp_src_${OTP_VERSION}.tar.gz" -o "otp_src_${{ github.ref_name }}.tar.gz"

      - name: Compile OTP
        run: |
          export ROOTDIR="$(pwd)"
          export OPENSSL_ARCHIVE="openssl-${{ env.OPENSSL_VERSION }}-${{ matrix.arch }}-apple-darwin.tar.gz"
          export PERFIX_DIR="/tmp/openssl-${{ env.OPENSSL_VERSION }}-${{ matrix.arch }}-apple-darwin"
          export OTP_VERSION="${GITHUB_REF##*/v}"
          mkdir -p "${PERFIX_DIR}"
          sudo tar -C "${PERFIX_DIR}" -xf "${OPENSSL_ARCHIVE}"
          tar -xzf "otp_src_${{ github.ref_name }}.tar.gz"
          cd "otp_src_${OTP_VERSION}"
          mkdir "otp_${OTP_VERSION}"
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            ./otp_build configure --xcomp-conf=xcomp/erl-xcomp-aarch64-darwin.conf --without-javac --with-ssl="${PERFIX_DIR}" --disable-dynamic-ssl-lib
            ./otp_build boot -a
            make DESTDIR="$(pwd)/otp_${OTP_VERSION}" install
          else
            ./configure --without-javac --with-ssl="${PERFIX_DIR}" --disable-dynamic-ssl-lib
            time make -j"$(sysctl -n hw.ncpu)"
            make DESTDIR="$(pwd)/otp_${OTP_VERSION}" install
          fi
          mkdir -p "${ROOTDIR}/build"
          cd "$(pwd)/otp_${OTP_VERSION}"
          tar -czf "${ROOTDIR}/build/otp-${{ matrix.arch }}-apple-darwin.tar.gz" .

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            build/*.tar.gz

  deploy-macos:
    runs-on: ubuntu-latest
    needs: macos
    steps:
      - name: deploy
        if: startsWith(github.ref, 'refs/tags/') && github.repository == 'cocoa-xu/otp-build'
        env:
          DEPLOY_MACOS_HOOK_URL: ${{ secrets.DEPLOY_MACOS_HOOK_URL }}
        run: |
          curl -sS --no-progress-meter "${DEPLOY_MACOS_HOOK_URL}${{ github.ref_name }}"

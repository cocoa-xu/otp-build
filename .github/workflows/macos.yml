name: macos

on:
  workflow_dispatch:
    inputs:
      otp_verison:
        description: 'OTP Version (X.Y.Z)'
        required: true
      openssl:
        description: 'use OpenSSL'
        required: false
        default: 'static'
        type: choice
        options:
          - static
          - shared
      openssl_version:
        description: 'OpenSSL Version'
        required: false
        default: '3.3.0'
      wxwidgets:
        description: 'use wxWidgets'
        required: false
        default: 'static'
        type: choice
        options:
          - static
          - shared
          - false
      wxwidgets_version:
        description: 'wxWidgets Version'
        required: false
        default: '3.2.6'
      build_arm64:
        description: 'Build ARM64'
        required: false
        default: 'true'
      build_x86_64:
        description: 'Build x86_64'
        required: false
        default: 'true'
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  macos:
    runs-on: ${{ matrix.job.runs-on }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.otp_verison }}-${{ matrix.job.target }}
      cancel-in-progress: true
    env:
      DEFAULT_WXWIDGETS_VERSION: "3.2.6"
      DEFAULT_OPENSSL_VERSION: "3.3.0"
      DEFAULT_OPENSSL_VERSION_OTP24: "1.1.1w"
    strategy:
      fail-fast: false
      matrix:
        job: 
          - { target: "arm64-apple-darwin", runs-on: "macos-14" }
          - { target: "x86_64-apple-darwin", runs-on: "macos-12" }

    name: ${{ matrix.job.target }}

    steps:
      - name: Build Check
        id: build-check
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "build=true" >> $GITHUB_OUTPUT
            
            export OTP_VERSION_V=${GITHUB_REF##*/v}

            echo "with_wxwidgets=static" >> $GITHUB_OUTPUT
            echo "wxwidgets_version=${{ env.DEFAULT_WXWIDGETS_VERSION }}" >> $GITHUB_OUTPUT
            echo "with_openssl=static" >> $GITHUB_OUTPUT
            echo "openssl_version=${{ env.DEFAULT_OPENSSL_VERSION }}" >> $GITHUB_OUTPUT
          else
            if [ "${{ matrix.job.target }}" == "arm64-apple-darwin" ]; then
              echo "build=${{ inputs.build_arm64 }}" >> $GITHUB_OUTPUT
            fi

            if [ "${{ matrix.job.target }}" == "x86_64-apple-darwin" ]; then
              echo "build=${{ inputs.build_x86_64 }}" >> $GITHUB_OUTPUT
            fi

            export OTP_VERSION_V=${{ inputs.otp_verison }}

            echo "with_wxwidgets=${{ inputs.wxwidgets }}" >> $GITHUB_OUTPUT
            echo "wxwidgets_version=${{ inputs.wxwidgets_version }}" >> $GITHUB_OUTPUT
            echo "with_openssl=${{ inputs.openssl }}" >> $GITHUB_OUTPUT
            echo "openssl_version=${{ inputs.openssl_version }}" >> $GITHUB_OUTPUT
          fi

          export OTP_VERSION="${OTP_VERSION_V#v}"
          echo "version=${OTP_VERSION}" >> $GITHUB_OUTPUT
          echo "major=${OTP_MAJOR_VER}" >> $GITHUB_OUTPUT
          if [ "${OTP_MAJOR_VER}" -lt "25" ]; then
            echo "lte24=true" >> $GITHUB_OUTPUT
          else
            echo "lte24=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout
        if: steps.build-check.outputs.build == 'true'
        uses: actions/checkout@v4

      - name: Cache OTP Source Code
        if: steps.build-check.outputs.build == 'true'
        id: cache-otp
        uses: actions/cache@v4
        with:
          key: otp-${{ steps.build-check.outputs.version }}
          path: |
            ./otp_src_${{ steps.build-check.outputs.version }}.tar.gz

      - name: Download OTP Source Code
        if: steps.build-check.outputs.build == 'true' && steps.cache-otp.outputs.cache-hit != 'true'
        run: |
          export OTP_VERSION=${{ steps.build-check.outputs.version }}
          export OTP_SRC_FILENAME="otp_src_${OTP_VERSION}.tar.gz"
          curl -fSL "https://github.com/erlang/otp/releases/download/OTP-${OTP_VERSION}/${OTP_SRC_FILENAME}" -o "${OTP_SRC_FILENAME}" || \
          { echo "${OTP_SRC_FILENAME} is not released yet"; exit 1; }

      - name: Cache Precompiled OpenSSL
        if: steps.build-check.outputs.build == 'true'
        id: cache-openssl
        uses: actions/cache@v4
        with:
          key: openssl-${{ steps.build-check.outputs.openssl_version }}-${{ matrix.job.target }}
          path: |
            ./openssl-${{ matrix.job.target }}.tar.gz

      - name: Download Precompiled OpenSSL
        if: steps.build-check.outputs.build == 'true' && steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          export OPENSSL_FILENAME="openssl-${{ matrix.job.target }}.tar.gz"
          curl -fSL "https://github.com/cocoa-xu/openssl-build/releases/download/v${{ steps.build-check.outputs.openssl_version }}/${OPENSSL_FILENAME}" -o "${OPENSSL_FILENAME}"
          curl -fSL "https://github.com/cocoa-xu/openssl-build/releases/download/v${{ steps.build-check.outputs.openssl_version }}/${OPENSSL_FILENAME}.sha256" -o "${OPENSSL_FILENAME}.sha256"
          shasum -c "${OTP_SRC_FILENAME}.sha256"

      - name: Cache Precompiled wxWidgets
        if: steps.build-check.outputs.build == 'true' && steps.build-check.outputs.with_wxwidgets != 'false'
        id: cache-wxwidgets
        uses: actions/cache@v4
        with:
          key: wxwidgets-${{ steps.build-check.outputs.with_wxwidgets }}-${{ steps.build-check.outputs.wxwidgets_version }}-${{ matrix.job.target }}
          path: |
            ./wxwidgets-${{ steps.build-check.outputs.with_wxwidgets }}-${{ matrix.job.target }}.tar.gz

      - name: Download Precompiled wxWidgets
        if: steps.build-check.outputs.build == 'true' && steps.build-check.outputs.with_wxwidgets != 'false' && steps.cache-wxwidgets.outputs.cache-hit != 'true'
        run: |
          export WXWIDGETS_FILENAME="wxWidgets-${{ steps.build-check.outputs.with_wxwidgets }}-${{ matrix.job.target }}.tar.gz"
          curl -fSL "https://github.com/cocoa-xu/wxWidgets-build/releases/download/v${{ steps.build-check.outputs.wxwidgets_version }}/${WXWIDGETS_FILENAME}" -o "${WXWIDGETS_FILENAME}"
          curl -fSL "https://github.com/cocoa-xu/wxWidgets-build/releases/download/v${{ steps.build-check.outputs.wxwidgets_version }}/${WXWIDGETS_FILENAME}.sha256" -o "${WXWIDGETS_FILENAME}.sha256"
          shasum -c "${WXWIDGETS_FILENAME}.sha256"

      - name: Compile OTP
        if: steps.build-check.outputs.build == 'true'
        id: target
        run: |
          export OTP_VERSION=${{ steps.build-check.outputs.version }}

          export ROOTDIR="$(pwd)"
          export OTP_SRC="otp_src_${OTP_VERSION}"
          export OTP_SRC_DIR="${ROOTDIR}/${OTP_SRC}"
          export DESTDIR="${ROOTDIR}/otp_${OTP_VERSION}"
          export RELDIR="${ROOTDIR}/rel/otp_${OTP_VERSION}"
          export CFLAGS="-Os -fno-common -mmacosx-version-min=11.0"

          rm -rf "${OTP_SRC_DIR}"
          mkdir -p "${OTP_SRC_DIR}"
          rm -rf "${DESTDIR}"
          mkdir -p "${DESTDIR}"
          rm -rf "${ROOTDIR}/build"
          mkdir -p "${ROOTDIR}/build"

          export OPENSSL_ARCHIVE="openssl-${{ matrix.job.target }}.tar.gz"
          export PERFIX_DIR="/tmp/openssl-${{ steps.build-check.outputs.openssl_version }}-${{ matrix.job.target }}"

          mkdir -p "${PERFIX_DIR}"
          sudo tar -C "${PERFIX_DIR}" -xf "${OPENSSL_ARCHIVE}"
          if [ "${{ steps.build-check.outputs.with_openssl }}" = "static" ]; then
            find "${PERFIX_DIR}" -name "*.dylib"  -exec rm {} \;
          fi

          if [ "${{ steps.build-check.outputs.with_wxwidgets }}" != "false" ]; then
            export WXWIDGETS_ARCHIVE="wxWidgets-${{ steps.build-check.outputs.with_wxwidgets }}-${{ matrix.job.target }}.tar.gz"
            sudo tar -C "/usr/local" -xf "${WXWIDGETS_ARCHIVE}" --strip-components=3

            /usr/local/bin/wx-config --version
          fi

          tar -xzf "otp_src_${{ steps.build-check.outputs.version }}.tar.gz" -C "${OTP_SRC}" --strip-components=1
          cd "${OTP_SRC_DIR}"
          if [ "${{ steps.build-check.outputs.with_openssl }}" = "static" ]; then
            ./otp_build configure --without-javac --with-ssl="${PERFIX_DIR}" --disable-dynamic-ssl-lib
          else
            ./otp_build configure --without-javac --with-ssl="${PERFIX_DIR}"
          fi

          rm -rf "${RELDIR}"
          ./otp_build boot -a
          ./otp_build release -a "${RELDIR}"
          cd "${RELDIR}"
          ./Install -sasl "$(pwd)"
          tar -czf "${ROOTDIR}/build/otp-release-${{ matrix.job.target }}.tar.gz" .

          cd "${OTP_SRC_DIR}"
          make -j"$(sysctl -n hw.ncpu)"
          make DESTDIR="${DESTDIR}" install
          cd "${DESTDIR}"
          tar -czf "${ROOTDIR}/build/otp-${{ matrix.job.target }}.tar.gz" .

          cd "${ROOTDIR}/build"
          shasum -a 256 otp-${{ matrix.job.target }}.tar.gz | tee otp-${{ matrix.job.target }}.tar.gz.sha256
          shasum -a 256 otp-release-${{ matrix.job.target }}.tar.gz | tee otp-release-${{ matrix.job.target }}.tar.gz.sha256

      - uses: softprops/action-gh-release@v2
        if: steps.build-check.outputs.build == 'true'
        with:
          tag_name: v${{ steps.build-check.outputs.version }}
          name: v${{ steps.build-check.outputs.version }}
          files: |
            build/*.tar.gz
            build/*.sha256

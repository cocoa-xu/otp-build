name: precompile-macOS

on:
  workflow_dispatch:
    inputs:
      otp_verison:
        description: 'OTP Version'
        required: true
      build_arm64:
        description: 'Build ARM64'
        required: false
        default: 'true'
      build_x86_64:
        description: 'Build x86_64'
        required: false
        default: 'true'
  push:
    tags:
      - "v*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.job.runs-on }}
    outputs:
      otp_version: ${{ steps.otp.outputs.version }}
      build: ${{ steps.build-check.outputs.build }}
      target: ${{ matrix.job.target }}
    env:
      TARGET_TRIPLET: "x86_64-apple-darwin"
      OPENSSL_VERSION: "3.3.0"
      OPENSSL_VERSION_OTP_24_AND_BELOW: "1.1.1w"
    strategy:
      matrix:
        job: 
          - { target: "arm64-apple-darwin", runs-on: "macos-14" }
          - { target: "x86_64-apple-darwin", runs-on: "macos-12" }
      fail-fast: false

    name: ${{ matrix.job.target }}

    steps:
      - name: Build Check
        id: build-check
        run: |
          if [ "${{ matrix.job.target }}" == "arm64-apple-darwin" ]; then
            echo "build=${{ inputs.build_arm64 }}" >> $GITHUB_OUTPUT
          fi

          if [ "${{ matrix.job.target }}" == "x86_64-apple-darwin" ]; then
            echo "build=${{ inputs.build_x86_64 }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout
        if: steps.build-check.outputs.build == 'true'
        uses: actions/checkout@v4

      - name: Get OTP Version
        if: steps.build-check.outputs.build == 'true'
        id: otp
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            export OTP_VERSION_V=${{ inputs.otp_verison }}
          elif [ "${{ github.event_name }}" = "push" ]; then
            export OTP_VERSION_V=${GITHUB_REF##*/v}
          else
            exit 1
          fi

          export OTP_VERSION="${OTP_VERSION_V#v}"
          export OTP_MAJOR_VER="${OTP_VERSION%%.*}"

          echo "version=v${OTP_VERSION}" >> $GITHUB_OUTPUT
          echo "major=${OTP_MAJOR_VER}" >> $GITHUB_OUTPUT
          if [ "${OTP_MAJOR_VER}" -lt "25" ]; then
            echo "openssl_version=${OPENSSL_VERSION_OTP_24_AND_BELOW}" >> $GITHUB_OUTPUT
            echo "lte24=true" >> $GITHUB_OUTPUT
          else
            echo "openssl_version=${OPENSSL_VERSION}" >> $GITHUB_OUTPUT
            echo "lte24=true" >> $GITHUB_OUTPUT
          fi

      - name: Cache Precompiled OpenSSL
        if: steps.build-check.outputs.build == 'true' && (startsWith(steps.otp.outputs.version, 'v24') || startsWith(steps.otp.outputs.version, 'v23'))
        id: cache-openssl
        uses: actions/cache@v4
        with:
          key: openssl-${{ steps.otp.outputs.openssl_version }}-${{ matrix.job.target }}
          path: |
            ./openssl-${{ steps.otp.outputs.openssl_version }}-${{ matrix.job.target }}.tar.gz

      - name: Download Precompiled OpenSSL
        if: steps.build-check.outputs.build == 'true' && steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          curl -fSL "https://github.com/cocoa-xu/openssl-build/releases/download/v${{ steps.otp.outputs.openssl_version }}/openssl-${{ matrix.job.target }}.tar.gz" -o "openssl-${{ steps.otp.outputs.openssl_version }}-${{ matrix.job.target }}.tar.gz"

      - name: Cache OTP Source Code
        if: steps.build-check.outputs.build == 'true'
        id: cache-otp
        uses: actions/cache@v4
        with:
          key: otp-${{ steps.otp.outputs.version }}
          path: |
            ./otp_src_${{ steps.otp.outputs.version }}.tar.gz

      - name: Download OTP Source Code
        if: steps.build-check.outputs.build == 'true' && steps.cache-otp.outputs.cache-hit != 'true'
        run: |
          export OTP_VERSION=${{ steps.otp.outputs.version }}
          export OTP_VERSION="${OTP_VERSION#v}"
          echo "OTP_VERSION: $OTP_VERSION"
          curl -fSL "https://github.com/erlang/otp/releases/download/OTP-${OTP_VERSION}/otp_src_${OTP_VERSION}.tar.gz" -o "otp_src_${{ steps.otp.outputs.version }}.tar.gz" || \
          curl -fSL "https://github.com/erlang/otp/archive/refs/tags/OTP-${OTP_VERSION}.tar.gz" -o "otp_src_${{ steps.otp.outputs.version }}.tar.gz"

      - name: Compile OTP
        if: steps.build-check.outputs.build == 'true'
        run: |
          export OTP_VERSION=${{ steps.otp.outputs.version }}
          export OTP_VERSION="${OTP_VERSION#v}"

          export ROOTDIR="$(pwd)"
          export OTP_SRC="otp_src_${OTP_VERSION}"
          export OTP_SRC_DIR="${ROOTDIR}/${OTP_SRC}"
          export DESTDIR="${ROOTDIR}/otp_${OTP_VERSION}"

          rm -rf "${OTP_SRC_DIR}"
          mkdir -p "${OTP_SRC_DIR}"
          rm -rf "${DESTDIR}"
          mkdir -p "${DESTDIR}"
          rm -rf "${ROOTDIR}/build"
          mkdir -p "${ROOTDIR}/build"

          export OPENSSL_ARCHIVE="openssl-${{ steps.otp.outputs.openssl_version }}-${{ matrix.job.target }}.tar.gz"
          export PERFIX_DIR="/tmp/openssl-${{ steps.otp.outputs.openssl_version }}-${{ matrix.job.target }}"

          mkdir -p "${PERFIX_DIR}"
          sudo tar -C "${PERFIX_DIR}" -xf "${OPENSSL_ARCHIVE}"
          find "${PERFIX_DIR}" -name "*.dylib"  -exec rm {} \;

          tar -xzf "otp_src_${{ steps.otp.outputs.version }}.tar.gz" -C "${OTP_SRC}" --strip-components=1
          cd "${OTP_SRC_DIR}"
          ./configure --without-javac --with-ssl="${PERFIX_DIR}" --disable-dynamic-ssl-lib
          make -j"$(sysctl -n hw.ncpu)"

          make DESTDIR="${DESTDIR}" install
          cd "${DESTDIR}"
          tar -czf "${ROOTDIR}/build/otp-${{ env.TARGET_TRIPLET }}.tar.gz" .

          cd "${OTP_SRC_DIR}"
          make release
          cd ./release/*
          ./Install -sasl "$(pwd)"
          tar -czf "${ROOTDIR}/build/otp-release-${{ env.TARGET_TRIPLET }}.tar.gz" .

          cd "${ROOTDIR}/build"
          shasum -a 256 otp-${{ env.TARGET_TRIPLET }}.tar.gz | tee otp-${{ env.TARGET_TRIPLET }}.tar.gz.sha256
          shasum -a 256 otp-release-${{ env.TARGET_TRIPLET }}.tar.gz | tee otp-release-${{ env.TARGET_TRIPLET }}.tar.gz.sha256

      - uses: softprops/action-gh-release@v2
        if: steps.build-check.outputs.build == 'true'
        with:
          tag_name: ${{ steps.otp.outputs.version }}
          name: ${{ steps.otp.outputs.version }}
          files: |
            build/*.tar.gz
            build/*.sha256

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: deploy
        if: github.repository == 'cocoa-xu/otp-build' && needs.build.outputs.build == 'true'
        env:
          DEPLOY_X86_64_MACOS_HOOK_URL: ${{ secrets.DEPLOY_X86_64_MACOS_HOOK_URL }}
          DEPLOY_ARM64_MACOS_HOOK_URL: ${{ secrets.DEPLOY_ARM64_MACOS_HOOK_URL }}
        run: |
          if [ "${{ needs.build.outputs.target }}" == "arm64-apple-darwin" ] && [ "${{ needs.build.outputs.build }}" == "true" ]; then
            curl -sS --no-progress-meter "${DEPLOY_ARM64_MACOS_HOOK_URL}${{ needs.build.outputs.otp_version }}" ;
          elif [ "${{ needs.build.outputs.target }}" == "x86_64-apple-darwin" ] && [ "${{ needs.build.outputs.build }}" == "true" ]; then
            curl -sS --no-progress-meter "${DEPLOY_X86_64_MACOS_HOOK_URL}${{ needs.build.outputs.otp_version }}" ;
          fi
